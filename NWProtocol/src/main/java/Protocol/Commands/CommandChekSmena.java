package protocol.commands;

import protocol.bd.DBContext;

//Команда cheksmena
//        Команда выполняет проверку наличия открытой смены по данному ID_TERMINAL и LOGIN
//        1.	checksmena при успешном выполнении возвращает CHKSMENA и ожидает передачи данных в формате TString (массив строк)
//        2.	Передача параметров в формате TString (массив строк)
//        Наименования параметров:
//        ID_TERMINAL = Идентификатор терминала, обязательный параметр;
//        LOGIN = Выданный логин, обязательный параметр;
//        Количество передаваемых параметров – два. В случае неправильного написание наименования параметров, параметр будет проигнорирован, и заполнен значением по умолчанию. В случае не заполнения одного из обязательных параметров сервер вернет ошибку выполнения команды.  Параметры могут быть перечислены в любой последовательности.
//
//        3.	Передача переменной количества параметров в списке TString (массив строк) передается числовым значением.
//        4.	Передает переменную в формате TString (массив строк) со следующими записями:
//        - ADRESS = Адрес терминала или кассы;
//        - TERMINAL = Наименование терминала;
//        - SMENA = Количество открытых смен
//        - SMENA_ID = Идентификатор смены
//        - DATA_N=Дата начала смены
//        - BANK_ID=Идентификатор банка
//        - BANK_NAME=Наименование банка
//        - FILIAL_ID=Идентификатор филиала
//        - FILIAL=Наименование филиала
//        5.	Возвращение результата выполнения команды
//        В случае успешного выполнения команды возвращается 200 ОК, в случае возникновения какой либо ошибки выводится сообщение 500 ERROR. По завершению работы команды происходит отключение от сервера.


/**
 * Created by lexa on 08.12.2016.
 */
public class CommandChekSmena extends AbstractCommand {
    @Override
    public void executeImpl(DBContext dbContext) {
    }
}