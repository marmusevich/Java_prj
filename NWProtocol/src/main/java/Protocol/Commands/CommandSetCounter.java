package protocol.commands;

import protocol.bd.DBContext;

//Команда setcounter
//        Выполняет процедуру добавления записей счетчиков по PAY_ID платежа:
//        1.	setcounter при успешном выполнении возвращает WCOUNTER и ожидает передачи данных в формате TString (массив строк)
//        2.	Передача переменной количества параметров в списке TString (массив строк) передается числовым значением.
//        3.	Передача параметров в формате TString (массив строк)
//        Наименования параметров:
//        ID_TERMINAL = Идентификатор терминала, обязательный параметр;
//        LOGIN = Выданный логин, обязательный параметр;
//        LS = Единый лицевой счет.
//        DT = Текущая дата
//        IDEN_SHET = Идентификатор счетчика
//        POKAZ_PRED = Предыдущие показания счетчика.
//        POKAZ_TEK= Текущие показания счетчика
//        TARIF = Текущий тариф
//        PAY_ID = Идентификатор платежа, получается командой setdata;
//        KOD_ORG – Код организации, по умолчанию равен 0;
//        USLUGA = Услуга по которой проводится платеж, обязательный параметр, назначается согласно внутреннего справочника на сервере, и выдается индивидуально при регистрации терминала в системе.
//
//        В случае неправильного написание наименования параметров, параметр будет проигнорирован, и заполнен значением по умолчанию. В случае не заполнения одного из обязательных параметров сервер вернет ошибку выполнения команды.  Параметры могут быть перечислены в любой последовательности.
//
//        4.	Возвращение результата выполнения команды
//        В случае успешного выполнения команды возвращается 200 ОК, в случае возникновения какой либо ошибки выводится сообщение 500 ERROR, либо 500 и описание ошибки. По завершению работы команды происходит отключение от сервера.


/**
 * Created by lexa on 08.12.2016.
 */
public class CommandSetCounter extends AbstractCommand {
    @Override
    public void doWorck(DBContext dbContext) {
    }
}
